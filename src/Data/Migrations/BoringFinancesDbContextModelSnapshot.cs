// <auto-generated />
using System;
using BoringSoftware.Finances.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BoringSoftware.Finances.Data.Migrations
{
    [DbContext(typeof(BoringFinancesDbContext))]
    partial class BoringFinancesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AccountTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Kebab")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Accounts.AccountType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "Equity"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "Good"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "Liability"
                        },
                        new
                        {
                            Id = (byte)4,
                            Code = "Income"
                        },
                        new
                        {
                            Id = (byte)5,
                            Code = "Expense"
                        },
                        new
                        {
                            Id = (byte)6,
                            Code = "Trading"
                        });
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.FinancialUnits.FinancialUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("FinancialUnitTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Kebab")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialUnitTypeId");

                    b.ToTable("FinancialUnits");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.FinancialUnits.FinancialUnitType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.ToTable("FinancialUnitTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "Currency"
                        },
                        new
                        {
                            Id = (byte)255,
                            Code = "Other"
                        });
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FinancialUnitId")
                        .HasColumnType("uuid");

                    b.Property<byte>("OperationEntryTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FinancialUnitId");

                    b.HasIndex("OperationEntryTypeId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationEntries");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationEntryNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationEntryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OperationEntryId");

                    b.ToTable("OperationEntryNotes");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationEntryType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.HasKey("Id");

                    b.ToTable("OperationEntryTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "Debit"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "Credit"
                        });
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationNotes");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Accounts.Account", b =>
                {
                    b.HasOne("BoringSoftware.Finances.Entities.Accounts.AccountType", "Type")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.FinancialUnits.FinancialUnit", b =>
                {
                    b.HasOne("BoringSoftware.Finances.Entities.FinancialUnits.FinancialUnitType", "Type")
                        .WithMany("FinanciaUnits")
                        .HasForeignKey("FinancialUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationEntry", b =>
                {
                    b.HasOne("BoringSoftware.Finances.Entities.Accounts.Account", "Account")
                        .WithMany("OperationEntries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringSoftware.Finances.Entities.FinancialUnits.FinancialUnit", "FinancialUnit")
                        .WithMany("OperationEntries")
                        .HasForeignKey("FinancialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringSoftware.Finances.Entities.Operations.OperationEntryType", "Type")
                        .WithMany("OperationEntries")
                        .HasForeignKey("OperationEntryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringSoftware.Finances.Entities.Operations.Operation", "Operation")
                        .WithMany("Entries")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FinancialUnit");

                    b.Navigation("Operation");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationEntryNote", b =>
                {
                    b.HasOne("BoringSoftware.Finances.Entities.Operations.OperationEntry", "OperationEntry")
                        .WithMany("Notes")
                        .HasForeignKey("OperationEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationEntry");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationNote", b =>
                {
                    b.HasOne("BoringSoftware.Finances.Entities.Operations.Operation", "Operation")
                        .WithMany("Notes")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Accounts.Account", b =>
                {
                    b.Navigation("OperationEntries");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Accounts.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.FinancialUnits.FinancialUnit", b =>
                {
                    b.Navigation("OperationEntries");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.FinancialUnits.FinancialUnitType", b =>
                {
                    b.Navigation("FinanciaUnits");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.Operation", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationEntry", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("BoringSoftware.Finances.Entities.Operations.OperationEntryType", b =>
                {
                    b.Navigation("OperationEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
