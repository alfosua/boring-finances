// <auto-generated />
using System;
using BoringFinances.Operations.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoringFinances.Operations.Data.Migrations
{
    [DbContext(typeof(OperationDbContext))]
    partial class OperationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountNote", b =>
                {
                    b.Property<long>("AccountsAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotesNoteId")
                        .HasColumnType("bigint");

                    b.HasKey("AccountsAccountId", "NotesNoteId");

                    b.HasIndex("NotesNoteId");

                    b.ToTable("AccountNote");
                });

            modelBuilder.Entity("AccountTag", b =>
                {
                    b.Property<long>("AccountsAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsTagId")
                        .HasColumnType("bigint");

                    b.HasKey("AccountsAccountId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("AccountTag");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Accounts.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AccountId"));

                    b.Property<byte>("AccountTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Accounts.AccountType", b =>
                {
                    b.Property<byte>("AccountTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            AccountTypeId = (byte)1,
                            Code = "Equity"
                        },
                        new
                        {
                            AccountTypeId = (byte)2,
                            Code = "Asset"
                        },
                        new
                        {
                            AccountTypeId = (byte)3,
                            Code = "Liability"
                        },
                        new
                        {
                            AccountTypeId = (byte)4,
                            Code = "Income"
                        },
                        new
                        {
                            AccountTypeId = (byte)5,
                            Code = "Expense"
                        },
                        new
                        {
                            AccountTypeId = (byte)6,
                            Code = "Exchange"
                        });
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Annotations.Note", b =>
                {
                    b.Property<long>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NoteId"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Annotations.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.FinancialUnits.FinancialUnit", b =>
                {
                    b.Property<long>("FinancialUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FinancialUnitId"));

                    b.Property<string>("Code")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("FinancialUnitTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("FractionalDigits")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FinancialUnitId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FinancialUnitTypeId");

                    b.ToTable("FinancialUnits");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.FinancialUnits.FinancialUnitType", b =>
                {
                    b.Property<byte>("FinancialUnitTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("FinancialUnitTypeId");

                    b.ToTable("FinancialUnitTypes");

                    b.HasData(
                        new
                        {
                            FinancialUnitTypeId = (byte)1,
                            Code = "Other"
                        },
                        new
                        {
                            FinancialUnitTypeId = (byte)2,
                            Code = "FiatCurrency"
                        },
                        new
                        {
                            FinancialUnitTypeId = (byte)3,
                            Code = "CryptoCurrency"
                        });
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.Operation", b =>
                {
                    b.Property<long>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OperationId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OperationId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.OperationAction", b =>
                {
                    b.Property<byte>("OperationActionId")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.HasKey("OperationActionId");

                    b.ToTable("OperationActions");

                    b.HasData(
                        new
                        {
                            OperationActionId = (byte)1,
                            Code = "Debit"
                        },
                        new
                        {
                            OperationActionId = (byte)2,
                            Code = "Credit"
                        });
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.OperationEntry", b =>
                {
                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<int>("OperationEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OperationEntryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OperationId", "OperationEntryId");

                    b.ToTable("OperationEntries");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.OperationEntryVersion", b =>
                {
                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<int>("OperationEntryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Effective")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FinancialUnitId")
                        .HasColumnType("bigint");

                    b.Property<byte>("OperationActionId")
                        .HasColumnType("smallint");

                    b.HasKey("OperationId", "OperationEntryId", "Effective");

                    b.HasIndex("AccountId");

                    b.HasIndex("FinancialUnitId");

                    b.HasIndex("OperationActionId");

                    b.ToTable("OperationEntryVersions");
                });

            modelBuilder.Entity("FinancialUnitNote", b =>
                {
                    b.Property<long>("FinancialUnitsFinancialUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotesNoteId")
                        .HasColumnType("bigint");

                    b.HasKey("FinancialUnitsFinancialUnitId", "NotesNoteId");

                    b.HasIndex("NotesNoteId");

                    b.ToTable("FinancialUnitNote");
                });

            modelBuilder.Entity("FinancialUnitTag", b =>
                {
                    b.Property<long>("FinancialUnitsFinancialUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsTagId")
                        .HasColumnType("bigint");

                    b.HasKey("FinancialUnitsFinancialUnitId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("FinancialUnitTag");
                });

            modelBuilder.Entity("NoteOperation", b =>
                {
                    b.Property<long>("NotesNoteId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationsOperationId")
                        .HasColumnType("bigint");

                    b.HasKey("NotesNoteId", "OperationsOperationId");

                    b.HasIndex("OperationsOperationId");

                    b.ToTable("NoteOperation");
                });

            modelBuilder.Entity("NoteOperationEntry", b =>
                {
                    b.Property<long>("NotesNoteId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationEntriesOperationId")
                        .HasColumnType("bigint");

                    b.Property<int>("OperationEntriesOperationEntryId")
                        .HasColumnType("integer");

                    b.HasKey("NotesNoteId", "OperationEntriesOperationId", "OperationEntriesOperationEntryId");

                    b.HasIndex("OperationEntriesOperationId", "OperationEntriesOperationEntryId");

                    b.ToTable("NoteOperationEntry");
                });

            modelBuilder.Entity("OperationTag", b =>
                {
                    b.Property<long>("OperationsOperationId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsTagId")
                        .HasColumnType("bigint");

                    b.HasKey("OperationsOperationId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("OperationTag");
                });

            modelBuilder.Entity("AccountNote", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Annotations.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountTag", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Annotations.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Accounts.Account", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.Accounts.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.FinancialUnits.FinancialUnit", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.FinancialUnits.FinancialUnitType", "FinancialUnitType")
                        .WithMany("FinancialUnits")
                        .HasForeignKey("FinancialUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialUnitType");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.OperationEntry", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.Operations.Operation", "Operation")
                        .WithMany("Entries")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.OperationEntryVersion", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.Accounts.Account", "Account")
                        .WithMany("OperationEntryVersions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.FinancialUnits.FinancialUnit", "FinancialUnit")
                        .WithMany("OperationEntryVersions")
                        .HasForeignKey("FinancialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Operations.OperationAction", "OperationAction")
                        .WithMany("OperationEntryVersions")
                        .HasForeignKey("OperationActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Operations.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Operations.OperationEntry", "OperationEntry")
                        .WithMany("Versions")
                        .HasForeignKey("OperationId", "OperationEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FinancialUnit");

                    b.Navigation("Operation");

                    b.Navigation("OperationAction");

                    b.Navigation("OperationEntry");
                });

            modelBuilder.Entity("FinancialUnitNote", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.FinancialUnits.FinancialUnit", null)
                        .WithMany()
                        .HasForeignKey("FinancialUnitsFinancialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Annotations.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinancialUnitTag", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.FinancialUnits.FinancialUnit", null)
                        .WithMany()
                        .HasForeignKey("FinancialUnitsFinancialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Annotations.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteOperation", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.Annotations.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Operations.Operation", null)
                        .WithMany()
                        .HasForeignKey("OperationsOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteOperationEntry", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.Annotations.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Operations.OperationEntry", null)
                        .WithMany()
                        .HasForeignKey("OperationEntriesOperationId", "OperationEntriesOperationEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OperationTag", b =>
                {
                    b.HasOne("BoringFinances.Operations.Data.Operations.Operation", null)
                        .WithMany()
                        .HasForeignKey("OperationsOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoringFinances.Operations.Data.Annotations.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Accounts.Account", b =>
                {
                    b.Navigation("OperationEntryVersions");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Accounts.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.FinancialUnits.FinancialUnit", b =>
                {
                    b.Navigation("OperationEntryVersions");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.FinancialUnits.FinancialUnitType", b =>
                {
                    b.Navigation("FinancialUnits");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.Operation", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.OperationAction", b =>
                {
                    b.Navigation("OperationEntryVersions");
                });

            modelBuilder.Entity("BoringFinances.Operations.Data.Operations.OperationEntry", b =>
                {
                    b.Navigation("Versions");
                });
#pragma warning restore 612, 618
        }
    }
}
